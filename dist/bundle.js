!function(t){var e={};function r(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)r.d(n,s,function(e){return t[e]}.bind(null,s));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var n=class{constructor(){this.handlers={}}on(t,e){return this.handlers[t]=this.handlers[t]||[],this.handlers[t].push(e),this.handlers[t]}off(t){this.handlers[t]&&delete this.handlers[t]}trigger(t,e){let r=e||[],n=this.handlers[t];return!n||n.every(t=>!1!==t.apply(this,r))}};const s={typeDecide:function(t,e){return Object.prototype.toString.call(t)==="[object "+e+"]"},serializeObj:function(t){let e="";return Object.keys(t).forEach(r=>{s.typeDecide(t[r],"Object")?e+=r+"="+s.stringify(t[r]):e+=r+"="+t[r]+"^"}),encodeURIComponent(e.substr(0,e.length-1))},stringify:function(t){if(window.JSON&&window.JSON.stringify)return JSON.stringify(t);var e=typeof t;if("object"!=e||null===t)return"string"==e&&(t='"'+t+'"'),String(t);var r,n,s=[],i=t&&t.constructor==Array,o=arguments.callee;for(r in t)t.hasOwnProperty(r)&&(e=typeof(n=t[r]),t.hasOwnProperty(r)&&("string"==e?n='"'+n+'"':"object"==e&&null!==n&&(n=o(n)),s.push((i?"":'"'+r+'":')+String(n))));return(i?"[":"{")+String(s)+(i?"]":"}")},assignObject:function(t,e){for(let r in e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t}};var i=s;e.default=class extends n{constructor(t){super(),this.config=i.assignObject({dataKey:"",mergeReport:!0,delay:1e3,url:"",getPath:"",postPath:"",random:1},t),this.queue={get:[],post:[]},this.getUrl=this.config.url+this.config.getPath,this.postUrl=this.config.url+this.config.postPath}reportByGet(t){this.sendData("get",t)}reportByPost(t){this.sendData("post",t)}sendData(t,e){this.catchData(t,e)&&this.delayReport()}delayReport(t){if(!this.trigger("beforeReport"))return;let e=this.config.mergeReport?this.config.delay:0;setTimeout(()=>{this.trigger("beforeSend")&&this.report(t)},e)}catchData(t,e){return!(Math.random()>=this.config.random)&&(this.queue[t].push(e),this.queue[t])}report(t){Promise.all([this.getRequest(),this.postRequest()]).then(e=>{this.trigger("afterReport"),t&&t.call(this,e)})}getRequest(){return new Promise(t=>{if(0===this.queue.get.length)t();else{const e=this._getParames("get");let r=this.getUrl+"?"+this.config.dataKey+"="+e,n=new window.Image;n.onload=(()=>{t(e)}),n.src=r}})}postRequest(){return new Promise(t=>{if(0===this.queue.post.length)t();else{const e=this._getParames("post"),r=new XMLHttpRequest;r.onreadystatechange=(()=>{4==r.readyState&&200==r.status&&t(e)}),r.open("POST",this.postUrl,!0),r.setRequestHeader("Content-Type","application/json");const n={};n[this.config.dataKey]=e,r.send(JSON.stringify(n))}})}_getParames(t){const e=this.queue[t];let r=this.config.mergeReport,n=r?e:[e.shift()];return r&&(this.queue[t]=[]),n.map(t=>i.serializeObj(t)).join("|")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,